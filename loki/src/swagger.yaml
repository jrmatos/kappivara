openapi: 3.0.0
info:
  title: Loki API
  description: Loki is a microservice for handling user management
  version: 0.0.1
servers:
  - url: http://localhost:3000
    description: Loki server

components:
  schemas:
    User:
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: George
        lastName:
          type: string
          example: Lucas
    UserWithPassword:
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: george.lucas@gmail.com
        password:
          type: string
          example: $2b$06$bXy5ENF2m6RnrID/eTNe8.ICzaSPe1bvIE.tOwzJzKJJRNxmqCu7i
    UserPOST:
      properties:
        firstName:
          type: string
          example: George
        lastName:
          type: string
          example: Lucas

    UserCreatePOST:
      properties:
        firstName:
          type: string
          example: George
        lastName:
          type: string
          example: Lucas
        email:
          type: string
          example: george.lucas@gmail.com
        password:
          type: string
          example: $2b$06$bXy5ENF2m6RnrID/eTNe8.ICzaSPe1bvIE.tOwzJzKJJRNxmqCu7i
    UserLoginPOST:
      properties:
        email:
          type: string
          example: george.lucas@gmail.com
        password:
          type: string
          example: george.lucas123
    JWT:
      properties:
        jwt:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJwYXVsb2pvbWF0b3NAZ21haWwuY29tIiwiaWF0IjoxNjI3NzYxMzYwLCJleHAiOjE2Mjc4NDc3NjB9.6Fjlv9dnzJ2681mrvx_W37VVkJPjmNmak6lGY5HlMqM

paths:
  /api/users:
    get:
      summary: Returns a list of users
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Saves a user
      requestBody:
        description: User payload
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/UserCreatePOST'
      responses:
        '200':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
    
  /api/users/{userId}:
    put:
      summary: Updates a user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to update
      requestBody:
        description: User payload
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/UserPOST'
      responses:
        '200':
            description: Upate will return a default UpdateResult payload from Typeorm
            content:
              application/json:
                schema:
                  type: object

  /api/users/{userEmail}:
    get:
      summary: Returns a user given an email
      responses:
        '200':    # status code
          description: A JSON object containg the found user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithPassword'